program
    ::= package-decl
    ( protocol-decl
    | import-decl
    | struct-decl
    | impl-decl
    | enum-decl
    | func-decl
    | const-decl
    )*

protocol-decl
    ::= 'protocol' identifier '{'
        (protocol-member (terminator protocol-member))?
    '}'

protocol-member
    ::= 'expect' identifier '('
        (protocol-member-parameter (',' protocol-member-parameter)* )?
    ')' type-qualifier terminator

protocol-member-parameter
    ::= identifier ':' type-qualifier

package-decl
    ::= 'package' identifier ('.' identifier)* terminator

import-decl
    ::= 'import' identifier ('.' identifier)* import-qualifier terminator

import-qualifier
    ::= '{' (identifier (',' identifier)* )? '}'

struct-decl
    ::= 'struct' ('(' struct-attribute+ ')')? identifier ('('
        (struct-parameter (',' struct-parameter)* )?
    ')')? '{'
            (struct-member (terminator struct-member)* )?
    '}' | terminator

struct-parameter
    ::= identifier ':' struct-parameter-type

struct-parameter-type
    ::= '$type'
    | '$int'
    | '$bool'

struct-attribute
    ::= 'ffi'

struct-member
    ::= identifier ':' type-qualifier


impl-decl
    ::= 'impl' identifier ('for' type-qualifier) '{'
        (impl-member (terminator impl-member)* )?
    '}'

impl-member
    ::= impl-member-function

impl-member-function
    ::= 'fn' identifier '('
        (impl-member-parameter (',' impl-member-parameter)* )?
    ')' type-qualifier '{'
        statement*
    '}'

impl-member-parameter
    ::= identifier ':' type-qualifier

func-decl
    ::= 'fn' ('(' func-attribute+ ')')? identifier '('
        (func-parameter (',' func-parameter)* )?
    ')' type-qualifier ':' func-attribute+ '{'
        statement*
    '}' | terminator

func-parameter
    ::= identifier ':' type-qualifier

func-attribute
    ::= 'noinline'
    | 'inline'
    | 'ffi'

enum-decl
    ::= 'enum' ('(' enum-attribute+ ')')? identifier '{'
        (enum-member (',' enum-member)* )?
    '}'

enum-attribute
    ::= 'ffi'

enum-member
    ::= identifier ('=' integer-literal)?

const-decl
    ::= 'const' identifier (':' type-qualifier)? '=' expression

statement
    ::= return-statement
    | for-statement
    | if-statement
    | when-statement
    | break-statement
    | continue-statement
    | expression-statement
    | assign-statement
    | let-statement
    | mut-statement

return-statement
    ::= 'return' expression terminator

for-statement
    ::= 'for' for-statement-specifier? '{'
        statement*
    '}'

for-statement-specifier
    ::= boolean-literal
    | for-in-specifier

for-in-specifier
    ::= identifier 'in' expression

if-statement
    ::= 'if' expression '{'
        statement*
    '}' ( 'else' '{'
        statement*
    '}' )?

when-statement
    ::= 'when' expression-list '{'
        (when-clause (terminator when-clause)* )?
    '}' ( 'else' '{'
        statement*
    '}' )?

when-clause
    ::= expression-list '=>' expression

break-statement
    ::= 'break' terminator

continue-statement
    ::= 'continue' terminator

expression-statement
    ::= expression terminator

assign-statement
    ::= expression '=' expression terminator

let-statement
    ::= 'let' variable-specifier (':' type-qualifier)? '=' expression terminator

mut-statement
    ::= 'mut' variable-specifier (':' type-qualifier)? '=' expression terminator

variable-specifier
    ::= identifier
    | '(' identifier (',' identifier)* ')'

expression-list
    ::= expression+

expression
    ::= or-expression

or-expression
    ::= and-expression ('||' and-expression)*

and-expression
    ::= equality-expression ('&&' equality-expression)*

equality-expression
    ::= comparative-expression (equality-operator comparative-expression)*

comparative-expression
    ::= additive-expression (comparison-operator additive-expression)*

additive-expression
    ::= multiplicative-expression (additive-operator multiplicative-expression)*

multiplicative-expression
    ::= prefix-expression (multiplicative-operator prefix-expression)*

prefix-expression
    ::= prefix-operator suffix-expression

suffix-expression
    ::= dot-suffix
    | colon-suffix
    | call-suffix

dot-suffix
    ::= constructor-expression '.' identifier

colon-suffix
    ::= constructor-expression '::' identifier

call-suffix
    ::= constructor-expression '('
        (call-argument (',' call-argument)* )?
    ')'

call-argument
    ::= (identifier ':')? primary-expression

constructor-expression
    ::= type-qualifier '{'
        (constructor-argument (',' constructor-argument)* )?
    '}'

constructor-argument
    ::= identifier ':' literal-expression

primary-expression
    ::= tuple-expression
    | grouping-expression
    | variable-expression
    | literal-expression
    | if-expression
    | when-expression

tuple-expression
    ::= '(' expression ',' (expression (',' expression)* )? ')'

grouping-expression
    ::= '(' expression ')'

variable-expression
    ::= identifier

literal-expression
    ::= integer-literal
    | float-literal
    | boolean-literal
    | char-literal
    | string-literal

if-expression
    ::= 'if' expression '{'
        statement*
    '}' ( 'else' '{'
        statement*
    '}' )?

when-expression
    ::= 'when' expression-list '{'
        (when-clause (terminator when-clause)* )?
    '}' ( 'else' '{'
        statement*
    '}' )?

equality-operator
    ::= '=='
    | '!='

comparison-operator
    ::= '<'
    | '>'
    | '<='
    | '>='

additive-operator
    ::= '+'
    | '-'

multiplicative-operator
    ::= '*'
    | '/'
    | '%'

prefix-operator
    ::= '!'
    | '+'
    | '-'
    | '*'
    | '&'

type-qualifier
    ::= tuple-type-qualifier
    | type-type-qualifier
    | reference-type-qualifier
    | template-type-qualifier

// type: (T1, T2, T3)
tuple-type-qualifier
    ::= '('
        type-qualifier (',' type-qualifier)*
    ')'

// type: Vector3
type-type-qualifier
    ::= identifier

// type: Shader&
reference-type-qualifier
    ::= type-type-qualifier '&'

// type: Array::<3, Int>
template-type-qualifier
    ::= type-type-qualifier '::<'
        template-type-item (',' template-type-item'')*
    '>'

template-type-item
    ::= template-type-qualifier
    | type-qualifier-literal

type-qualifier-literal
    ::= integer-literal
    | boolean-literal

identifier
    ::= [A-Za-z_][A-Za-z0-9_]+

boolean-literal
    ::= 'true'
    | 'false'

integer-literal
    ::= numeral-literal
    | hexadecimal-literal

float-literal
    ::= numeral-literal '.' numeral-literal

numeral-literal
    ::= [0-9]+

hexadecimal-literal
    ::= '0x' [A-Fa-f0-9]+

string-literal
    ::= '"' ( '\\' [\\"rtn] | [.] )*? '"'

char-literal
    ::= "'" [A-Za-z] | (
        '\\u' hexadecimal-literal hexadecimal-literal
              hexadecimal-literal hexadecimal-literal
    ) "'"

single-line-comment
    ::= '//' ~[\r\n]*

terminator
    ::= ( EOF
        | '\n'
        | ';'
    )+